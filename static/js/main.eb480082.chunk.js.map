{"version":3,"sources":["TodoItem.js","TodoList.js","TodoForm.js","firebase.js","Home.js","About.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","className","this","props","task","Component","TodoList","listNodes","data","map","listItem","key","title","TodoForm","doSubmit","e","preventDefault","onTaskSubmit","inputValue","value","setInputSearchRef","onSubmit","htmlFor","type","id","ref","placeholder","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","firestore","Home","getDataFromFirebase","collection","get","then","querySnapshot","docs","doc","console","log","setState","handleSubmit","Date","getTime","toString","set","catch","error","state","About","src","alt","App","Nav","activeKey","Item","Link","href","path","exact","from","to","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.eb480082.chunk.js","sourcesContent":["// Importing combination \r\nimport React, {Component} from \"react\";\r\nclass TodoItem extends Component  {\r\n    render(){\r\n        var classes = 'list-group-item clearfix';\r\n\t\treturn (\r\n\t\t\t<li className={classes}>\r\n\t\t\t\t{this.props.task}\r\n\t\t\t</li>\r\n\t\t);\r\n    }\r\n}\r\n// Exporting the component \r\nexport default TodoItem; ","// Importing combination \r\nimport React, {Component} from \"react\";\r\nimport  TodoItem  from \"./TodoItem.js\";\r\n\r\nclass TodoList extends Component  {\r\n    render(){\r\n        var listNodes = this.props.data.map(function (listItem) {\r\n\t\t\treturn (\r\n\t\t\t\t<TodoItem key={listItem.title} task={listItem.title} />\r\n\t\t\t);\r\n\t\t},this);\r\n\t\treturn (\r\n\t\t\t<ul className=\"list-group\">\r\n\t\t\t\t{listNodes}\r\n\t\t\t</ul>\r\n\t\t);\r\n    }\r\n}\r\n// Exporting the component \r\nexport default TodoList; ","// Importing combination \r\nimport React, {Component} from \"react\";\r\n\r\nclass TodoForm extends Component  {\r\n    constructor(props) {\r\n        super(props);\r\n        this.inputValue = null;\r\n        this.setInputSearchRef = e => {\r\n            this.inputValue = e;\r\n         }\r\n    }\r\n    doSubmit = (e) => {\r\n\t\te.preventDefault();\r\n\t\tthis.props.onTaskSubmit(this.inputValue.value);\r\n\t\tthis.inputValue.value = \"\";\r\n\t\treturn;\r\n\t}\r\n    render(){\r\n\t\treturn (\r\n\t\t\t<div className=\"commentForm vert-offset-top-2\">\r\n\t\t\t\t<div className=\"clearfix\">\r\n\t\t\t\t\t<form className=\"todoForm form-horizontal\" onSubmit={this.doSubmit}>\r\n\t\t\t\t\t\t<div className=\"form-group d-flex\">\r\n\t\t\t\t\t\t\t<label htmlFor=\"task\" className=\"mt-auto control-label\">Add Todo</label>\r\n\t\t\t\t\t\t\t<div className=\"col-md-8\">\r\n\t\t\t\t\t\t\t\t<input type=\"text\" id=\"task\" ref={this.setInputSearchRef} className=\"form-control\" placeholder=\"What do you need to do?\" />\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<input type=\"submit\" value=\"Save Todo\" className=\"btn btn-primary\" />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</form>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n    }\r\n}\r\n// Exporting the component \r\nexport default TodoForm; ","import firebase from \"firebase\";\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n    apiKey: \"AIzaSyCfXFJJvKC-nfdIopelN3NqhCw5WSOgSps\",\r\n    authDomain: \"fiverr-19dce.firebaseapp.com\",\r\n    databaseURL: \"https://fiverr-19dce.firebaseio.com\",\r\n    projectId: \"fiverr-19dce\",\r\n    storageBucket: \"fiverr-19dce.appspot.com\",\r\n    messagingSenderId: \"376328416704\"\r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\n\r\nexport { db };","// Importing combination \r\nimport React, {Component} from \"react\";\r\nimport  TodoList  from \"./TodoList.js\";\r\nimport  TodoForm  from \"./TodoForm.js\";\r\nimport { db } from \"./firebase.js\";\r\nclass Home extends Component  {\r\n    constructor(props) \r\n    { \r\n        super(props);  \r\n        this.state = {\r\n            data:[]\r\n        }\r\n    } \r\n    componentDidMount(){\r\n        this.getDataFromFirebase();\r\n    }\r\n    getDataFromFirebase = () => {\r\n        db.collection(\"todos_test\")\r\n        .get()\r\n        .then(querySnapshot => {\r\n            const data = querySnapshot.docs.map(doc => doc.data());\r\n            console.log(\"data :\",data);\r\n            this.setState({\r\n                data:data\r\n            })\r\n        });\r\n    }\r\n    handleSubmit = (data) => {\r\n        db.collection(\"todos_test\").doc(new Date().getTime().toString()).set({\r\n            title: data\r\n        })\r\n        .then(() => {\r\n            this.getDataFromFirebase();\r\n        })\r\n        .catch(function(error) {\r\n            console.error(\"Error writing document: \", error);\r\n        });\r\n    } \r\n    render() {\r\n\t\treturn (\r\n            <section className=\"container vert-offset-top-2\">\r\n\t\t  \t    <div id=\"todoBox\" className=\"todoBox col-xs-6 col-xs-offset-3\">\r\n                    <div className=\"well mt-4\">\r\n                        <TodoForm onTaskSubmit={this.handleSubmit} />\r\n                        <hr />\r\n                        <h1 className=\"vert-offset-top-0\">To do:</h1>\r\n                        <TodoList data={this.state.data} />\r\n                    </div>\r\n                </div>\r\n\t\t    </section>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n\r\n// Exporting the component \r\nexport default Home; ","// Importing combination \r\nimport React, {Component} from \"react\";\r\nclass About extends Component  {\r\n    render(){\r\n        return(\r\n            <section className=\"container vert-offset-top-2\">\r\n            <h4>Responsive Image</h4>\r\n            <img src=\"/images/image.jpg\" className=\"img-fluid\" alt=\"Beautiful world\"></img>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n// Exporting the component \r\nexport default About; ","import React from \"react\";\nimport  Home  from \"./Home.js\";\nimport  About  from \"./About.js\";\nimport Nav from 'react-bootstrap/Nav'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        <Nav\n          activeKey=\"/home\"\n        >\n          <Nav.Item>\n            <Nav.Link href=\"/home\">Home</Nav.Link>\n          </Nav.Item>\n          <Nav.Item>\n            <Nav.Link href=\"/about\">About</Nav.Link>\n          </Nav.Item>\n        </Nav>\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/home\">\n            <Home />\n          </Route>\n          <Route path=\"/\">\n            <Redirect exact from=\"/\" to=\"home\" />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}